{"version":3,"sources":["store/reducers.js","store/sagas.js","store/actions.js","store/store.js","components/RegisterForm.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isLoggedIn","workerSignUp","watchSignUpPending","fetchSignUp","data","fetch","headers","method","body","JSON","stringify","call","payload","put","type","takeEvery","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","state","action","applyMiddleware","run","RegisterForm","setShowForm","dispatch","useDispatch","useForm","register","handleSubmit","errors","className","href","src","alt","onSubmit","signUpPending","name","ref","required","App","useState","showForm","CSSTransition","in","timeout","classNames","unmountOnExit","onExited","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAEMA,EAAe,CACnBC,YAAY,G,mCCQJC,G,WAKOC,GAbjB,SAASC,EAAYC,GACnBC,MAAM,qDAAsD,CAC1DC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAIzB,SAAUH,EAAaG,GAAvB,iEACE,OADF,SACQO,YAAKR,EAAaC,EAAKQ,SAD/B,OAEE,OAFF,SAEQC,YCFC,CACLC,KAX2B,oBDU/B,uCAKO,SAAUZ,IAAV,iEACL,OADK,SACCa,YCjBuB,kBDiBId,GAD5B,uCEXP,IAAMe,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAiBC,cAEVC,EAAQC,aHFE,WAAmC,IAAlCC,EAAiC,uDAAzBzB,EAAc0B,EAAW,uCACvD,OAAQA,EAAOX,MACb,IER2B,kBFSzB,OAAO,eACFU,GAGP,IEZ2B,kBFazB,OAAO,eACFA,EADL,CAEExB,YAAY,IAGhB,QACE,OAAOwB,KGVXR,EAAiBU,YAAgBN,KAGnCA,EAAeO,IAAIzB,G,YCPN0B,EAAe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACvBC,EAAWC,cAD8B,EAEJC,cAAnCC,EAFuC,EAEvCA,SAAUC,EAF6B,EAE7BA,aAF6B,EAEfC,OAOhC,OACE,6BAASC,UAAU,wBACjB,uBAAGA,UAAU,oBAAoBC,KAAK,KACpC,yBAAKC,IAAI,iBAAiBC,IAAI,SADhC,YAIA,wBAAIH,UAAU,sBAAd,qBACA,0BAAMA,UAAU,oBAAoBI,SAAUN,GAZjC,SAAA9B,GACf0B,EFRyB,SAAA1B,GAC3B,MAAO,CACLU,KAL2B,kBAM3BF,QAASR,GEKAqC,CAAcrC,IACvByB,GAAY,OAWR,yBAAKO,UAAU,cACb,+BACE,uBAAGA,UAAU,cAAb,cACA,2BACEtB,KAAK,OACL4B,KAAK,YACLC,IAAKV,EAAS,CAAEW,UAAU,OAI9B,+BACE,uBAAGR,UAAU,cAAb,eACA,2BACEtB,KAAK,OACL4B,KAAK,aACLC,IAAKV,EAAS,CAAEW,UAAU,QAKhC,+BACE,uBAAGR,UAAU,cAAb,YACA,2BACEtB,KAAK,OACL4B,KAAK,WACLC,IAAKV,EAAS,CAAEW,UAAU,OAI9B,+BACE,uBAAGR,UAAU,cAAb,SACA,2BAAOtB,KAAK,OAAO4B,KAAK,QAAQC,IAAKV,EAAS,CAAEW,UAAU,OAG5D,+BACE,uBAAGR,UAAU,cAAb,gBACA,2BACEtB,KAAK,MACL4B,KAAK,cACLC,IAAKV,EAAS,CAAEW,UAAU,OAI9B,4BAAQ9B,KAAK,UAAb,eChCO+B,MA1Bf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIlB,EADJ,KAGb,OACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,yBAAKc,UAAU,aACb,kBAACY,EAAA,EAAD,CACEC,GAAIF,EACJG,QAAS,IACTC,WAAW,eACXC,eAAa,EACbC,SAAU,kBAAMxB,GAAY,KAE5B,kBAAC,EAAD,CAAcA,YAAaA,KAG7B,yBACES,IAAI,mBACJC,IAAI,cACJH,UAAWW,EAAW,eAAiB,wBCf7BO,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcbd92c4.chunk.js","sourcesContent":["import { SIGN_UP_PENDING, SIGN_UP_SUCCESS } from \"./actions\"\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_UP_PENDING:\r\n      return {\r\n        ...state\r\n      }\r\n\r\n    case SIGN_UP_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { takeEvery, put, call } from \"redux-saga/effects\"\r\nimport { SIGN_UP_PENDING, signUpSuccess } from \"./actions\"\r\n\r\nfunction fetchSignUp(data) {\r\n  fetch(\"https://note-maker-28d08.firebaseio.com/users.json\", {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    method: \"POST\",\r\n    body: JSON.stringify(data)\r\n  })\r\n}\r\n\r\nfunction* workerSignUp(data) {\r\n  yield call(fetchSignUp, data.payload)\r\n  yield put(signUpSuccess())\r\n}\r\n\r\nexport function* watchSignUpPending() {\r\n  yield takeEvery(SIGN_UP_PENDING, workerSignUp)\r\n}\r\n","export const SIGN_UP_PENDING = \"SIGN_UP_PENDING\"\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\"\r\n\r\nexport const signUpPending = data => {\r\n  return {\r\n    type: SIGN_UP_PENDING,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const signUpSuccess = () => {\r\n  return {\r\n    type: SIGN_UP_SUCCESS\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\"\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport { reducer } from \"./reducers\"\r\nimport { watchSignUpPending } from \"./sagas\"\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nsagaMiddleware.run(watchSignUpPending)\r\n","import React from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useForm } from \"react-hook-form\"\r\n\r\nimport { signUpPending } from \"../store/actions\"\r\n\r\nexport const RegisterForm = ({ setShowForm }) => {\r\n  const dispatch = useDispatch()\r\n  const { register, handleSubmit, errors } = useForm()\r\n\r\n  const onSubmit = data => {\r\n    dispatch(signUpPending(data))\r\n    setShowForm(false)\r\n  }\r\n\r\n  return (\r\n    <section className=\"registration-section\">\r\n      <a className=\"registration-logo\" href=\"/\">\r\n        <img src=\"./img/logo.svg\" alt=\"logo\" />\r\n        yourtext\r\n      </a>\r\n      <h1 className=\"registration-title\">Registration Form</h1>\r\n      <form className=\"registration-form\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"first-wrap\">\r\n          <label>\r\n            <p className=\"label-name\">First Name</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              ref={register({ required: true })}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            <p className=\"label-name\">Second Name</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"secondName\"\r\n              ref={register({ required: true })}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <label>\r\n          <p className=\"label-name\">Username</p>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            ref={register({ required: true })}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          <p className=\"label-name\">Email</p>\r\n          <input type=\"text\" name=\"email\" ref={register({ required: true })} />\r\n        </label>\r\n\r\n        <label>\r\n          <p className=\"label-name\">Phone Number</p>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"phoneNumber\"\r\n            ref={register({ required: true })}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Register</button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from \"react\"\nimport { Provider } from \"react-redux\"\nimport { CSSTransition } from \"react-transition-group\"\n\nimport \"./App.css\"\nimport { store } from \"./store/store.js\"\nimport { RegisterForm } from \"./components/RegisterForm\"\n\nfunction App() {\n  const [showForm, setShowForm] = useState(true)\n\n  return (\n    <Provider store={store}>\n      <div className=\"container\">\n        <CSSTransition\n          in={showForm}\n          timeout={500}\n          classNames=\"registerForm\"\n          unmountOnExit\n          onExited={() => setShowForm(false)}\n        >\n          <RegisterForm setShowForm={setShowForm} />\n        </CSSTransition>\n\n        <img\n          src=\"./img/rocket.svg\"\n          alt=\"recoket-img\"\n          className={showForm ? \"rocket-right\" : \"rocket-fullscren\"}\n        />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}